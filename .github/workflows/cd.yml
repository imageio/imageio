name: CD

# This action handles ImageIOs automatic releasing. It performs the following steps:
#
# - check for any new commits to master in fixed intervals (if none, exit)
# - check if they require a new semver version (if no, exit)
# - run through full unit-tests (if they fail, exit)
# - check if the docs build without warnings (if they fail, exit)
# - check if the wheel can be built (if it fails, exit)
# - bump ImageIO's version
# - update the changelog with the changes made (breaking, feature, fix, doc,
#   ...)
# - commit, tag, and push the new version + changelog to master (this also
#   pushes the new tag)
# - build the new imageIO version
# - release the new version to GitHub and PyPI


on:
  schedule:
    - cron: '42 1 * * 1' # weekly on Monday at 1:42am (UTC)
  workflow_dispatch:

jobs:
  initial_check:
    name: Should release?
    if: github.repository_owner == 'imageio'
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.skippy.outputs.release }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install Dependencies
      run: |
        pip install python-semantic-release
    - name: skippy
      id: skippy
      run: |
        export PYTHONPATH=$PWD:$PYTHONPATH
        if [[ $(semantic-release print-version 2>/dev/null) = "" ]]; then
          echo "::set-output name=release::false"
          echo "No changes to the API detected."
        else
          echo "::set-output name=release::true"
          echo "Releasing v$(semantic-release print-version)"
        fi
  
  docs:
    name: Build Docs
    needs: initial_check
    if: needs.initial_check.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install Dependencies
      run: |
        pip install -e .[docs]
    - name: Build Docs
      run: sphinx-build -W ./docs ./build
  
  cpython_tests:
    name: "${{ matrix.os }} / CPython ${{ matrix.pyversion }}"
    needs: initial_check
    if: needs.initial_check.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        pyversion: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        include:
          - name: Linux py37 full
            os: ubuntu-latest
            pyversion: '3.7'
            TEST_UNIT: 1
            TEST_FULL: 1
          - name: Use PyAV 10.0.0
            pyversion: '3.11'
            PYAV_10_0_0: 1
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Set up Python ${{ matrix.pyversion }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyversion }}
      - name: Install dependencies for tests
        shell: bash
        run: |
            pip install .[test,ffmpeg,tifffile]
      - name: Install optional dependencies for tests
        if: matrix.TEST_FULL == 1
        run: |
            pip install -q -U simpleitk astropy
      - name: Downgrade PyAV
        # PyAV 10.0.0 is needed on py3.11 but has issues, so we only use it on
        # py3.11 for now
        if: matrix.PYAV_10_0_0 != 1
        run: |
            pip install --upgrade av!=10.0.0
      - name: Run All Unit tests
        run: pytest -v --github-username "anything" --github-token ${{ secrets.GITHUB_TOKEN }}

  pypy_tests:
    name: "${{ matrix.os }} / ${{ matrix.pyversion }}"
    needs: initial_check
    if: needs.initial_check.outputs.should_release == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        pyversion: ["pypy-3.7", "pypy-3.8", "pypy-3.9"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up pypy
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.pyversion }}"
      - name: MacOS Numpy Fix
        if: runner.os == 'macOS'
        run: |
            brew install openblas
            OPENBLAS="$(brew --prefix openblas)" pypy3 -m pip install numpy
      - name: Install dependencies
        shell: bash
        run: |
            pypy3 -m pip install .[test,all-plugins-pypy]
      - name: Run Unit tests
        run: |
            pytest -v --github-username "anything" --github-token ${{ secrets.GITHUB_TOKEN }}
  
  build_test:
    name: Wheel Building Test
    needs: initial_check
    if: needs.initial_check.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies for tests
        shell: bash
        run: |
            pip install .[build]
      - name: Build the wheel
        run: python setup.py sdist bdist_wheel

  release:
    name: Release new Version
    needs: [cpython_tests, pypy_tests, build_test, docs]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Python Semantic Release
      uses: relekang/python-semantic-release@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pypi_token: ${{ secrets.PYPI_API_TOKEN }}
