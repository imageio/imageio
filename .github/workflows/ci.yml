name: CI


on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:
  docs:
    name: "Documentation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Build Docs
        run: |
            pip install -e .[test,docs]
      - name: Test docbuilding
        run: |
            invoke docs --clean --build
      # TODO: Upload the docs to some place
      # where they can be served. Potentially build
      # this in a different CI tool that can serve
      # html artifacts

  style:
    name: "Linting"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install Dependenceis
        run: |
            pip install -e .[test,linting]
      - name: Lint (black and flake8)
        run: |
            invoke lint
            invoke checkformat

  no-internet:
    name: "No-Internet Install"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install Dependenceis
        run: |
            # Build to force downloading images (but this step needs numpy and pillow)
            pip install -q -U numpy pillow
            python setup.py sdist
            pip install .[test,ffmpeg]
            # Delete the local copy, so we're actually using the installed version
            rm -rf ./imageio ./build ./egg-info
      - name: Unit tests
        run: |
            invoke test --installed

  cpython:
    name: "${{ matrix.os }} / CPython ${{ matrix.pyversion }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        pyversion: ["3.6", "3.7", "3.8", "3.9"]
        include:
          - name: Linux py37 full
            os: ubuntu-latest
            pyversion: '3.7'
            TEST_UNIT: 1
            TEST_FULL: 1
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.pyversion }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.pyversion }}
      - name: Install dependencies for tests
        shell: bash
        run: |
            pip install .[test,ffmpeg]
      - name: Install optional dependencies for tests
        if: matrix.TEST_FULL == 1
        run: |
            pip install -q -U simpleitk astropy
      - name: Run All Unit tests
        run: |
            pytest -v --cov=./imageio --cov-config=.coveragerc --cov-report="xml"
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.pyversion == '3.9'
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  pypy:
    name: "${{ matrix.os }} / ${{ matrix.pyversion }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        pyversion: ["pypy-3.6", "pypy-3.7"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up pypy
        uses: actions/setup-python@v2
        with:
          python-version: "pypy3"
      - name: MacOS Numpy Fix
        if: runner.os == 'macOS'
        run: |
            brew install openblas
            OPENBLAS="$(brew --prefix openblas)" pypy3 -m pip install numpy
      - name: Install dependencies
        shell: bash
        run: |
            pypy3 -m pip install .[test,ffmpeg]
      - name: Run Unit tests
        run: |
            invoke test --unit
