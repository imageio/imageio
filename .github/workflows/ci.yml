name: CI

# This action runs through ImageIO's continous integration pipeline. It
# performs the following checks:
# 
# - Linting/Style (Black)
# - Invokes the unit tests in no-internet mode on python 3.8
# - runs unit test on cypthon in matrix mode (python 3.X) x (3 major OS)
# - runs unit tests on pypy in matrix mode (pypy 3.X) x (3 major OS)


on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

concurrency:
  group: ci-${{ github.ref }}-1
  cancel-in-progress: true

jobs:
  docs-GH:
    name: Build Docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install Dependencies
      run: |
        pip install -e .[docs]
    - name: Build Docs
      run: sphinx-build -W ./docs ./build

  style:
    name: "Linting"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - uses: psf/black@22.12.0
        with:
          args: ". --check"
      - name: Install Dependencies
        shell: bash
        run: |
            pip install .[linting]
      - name: Flake8
        uses: liskin/gh-problem-matcher-wrap@v2
        with:
          linters: flake8
          run: flake8 .

  no-internet:
    name: "No-Internet Install"
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.8'
      - name: Install Dependenceis
        run: |
            # Build to force downloading images (but this step needs numpy and pillow)
            pip install -q --upgrade numpy pillow
            python setup.py sdist
            pip install .[test,all-plugins]
            # Delete the local copy, so we're actually using the installed version
            rm -rf ./imageio ./build ./egg-info
      - name: Unit tests
        run: |
            invoke test --installed

  cpython:
    uses: imageio/imageio/.github/workflows/cpython_tests.yml@fix_ci_fail

  pypy:
    name: "${{ matrix.os }} / ${{ matrix.pyversion }}"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
        pyversion: ["pypy-3.8", "pypy-3.9"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up pypy
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.pyversion }}"
      - name: MacOS Numpy Fix
        if: runner.os == 'macOS'
        run: |
            brew install openblas
            OPENBLAS="$(brew --prefix openblas)" pypy3 -m pip install numpy
      - name: Install dependencies
        shell: bash
        run: |
            pypy3 -m pip install .[test,all-plugins-pypy]
      - name: Run Unit tests
        run: |
            pytest -v --github-username "anything" --github-token ${{ secrets.GITHUB_TOKEN }}
